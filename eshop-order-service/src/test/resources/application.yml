server:
   port: ${SPRING_ORDSER_PORT}

spring:
    application:
       name: ${SPRING_ORDSER_NAME}
    banner:
        location: classpath:eshopOrderBanner.txt
    datasource:
        continue-on-error: true
        initialization-mode: always
        initialize: true
        password: ${SPRING_DATASOURCE_PASSWORD}
        schema: classpath:/schema.sql
        url: jdbc:postgresql://${SPRING_DATASOURCE_HOST}:${SPRING_DATASOURCE_PORT}/${SPRING_DATASOURCE_DBNAME}
        username: ${SPRING_DATASOURCE_USERNAME}
    jpa:
        hibernate:
            ddl-auto: update
            show-sql: true
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
#    kafka:
#       bootstrap-servers: localhost:9092
#       template:
#             default-topic: OrderNotificationTopic
#       producer:
#             key-serializer: org.apache.kafka.common.serialization.StringSerializer
#             value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#             properties:
#                 spring:
#                     json:
#                         type:
#                             mapping: 'event: com.eshop.eshoporderservice.model.logistics.event.OrderPlacedEvent'
    messages:
        basename: messages

eureka:
    instance:
        hostname: localhost
        preferIpAddress: true
#        lease-expiration-duration-in-seconds=1
#        lease-renewal-interval-in-seconds=2
    client:
        serviceUrl:
                defaultZone: http://${eureka.instance.hostname}:${SPRING_SERVER_PORT}/eureka
        register-with-eureka: true
        fetch-registry: true

logging:
    level:
        org:
            springframework: INFO
            springframework.security: TRACE
        eshop-order-service: INFO
